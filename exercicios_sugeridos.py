# Um exerc√≠cio baseado nessa aula seria criar uma fun√ß√£o chamada "limpar_console()" que utilize a biblioteca "os" do Python para limpar o console antes de exibir uma mensagem. Voc√™ pode testar a fun√ß√£o chamando-a e imprimindo uma mensagem de sua escolha. Lembre-se de importar a biblioteca "os" no in√≠cio do c√≥digo.

# Nesta aula, os instrutores discutiram sobre a import√¢ncia de organizar o c√≥digo em blocos de execu√ß√£o e como fazer isso utilizando fun√ß√µes no Python. Eles destacaram que colocar v√°rios prints dentro de condicionais pode deixar o c√≥digo polu√≠do e dif√≠cil de manter. Por isso, √© recomendado isolar comportamentos espec√≠ficos em sequ√™ncias de c√≥digo, o que facilita a edi√ß√£o e atualiza√ß√£o do c√≥digo.

# Para criar uma fun√ß√£o no Python, utiliza-se a palavra-chave "def" seguida pelo nome da fun√ß√£o. √â importante lembrar de colocar dois pontos ap√≥s o nome da fun√ß√£o. Dentro da fun√ß√£o, √© poss√≠vel adicionar todo o c√≥digo relacionado ao comportamento que se deseja implementar.

# Os instrutores tamb√©m mencionaram a utiliza√ß√£o da biblioteca "os" do Python, que fornece acesso a algumas fun√ß√µes embutidas, como a fun√ß√£o "system". Essa fun√ß√£o permite limpar o console antes de exibir mensagens. No Windows, utiliza-se "os.system('cls')" e no Mac, utiliza-se "os.system('clear')".

# Al√©m disso, foi ressaltado que √© uma boa pr√°tica de programa√ß√£o utilizar fun√ß√µes espec√≠ficas para realizar a√ß√µes espec√≠ficas, ao inv√©s de escrever todas as linhas de c√≥digo dentro de um bloco "else". Isso torna o c√≥digo mais organizado e f√°cil de entender.

# Uma vantagem de utilizar fun√ß√µes √© que √© poss√≠vel fechar o bloco de c√≥digo correspondente a fun√ß√£o no editor de c√≥digo sem apag√°-lo, o que torna o c√≥digo mais limpo e leg√≠vel.

# No exemplo dado, foi criada uma fun√ß√£o chamada "finalizar_app()" que √© executada quando a op√ß√£o escolhida n√£o √© um, dois ou tr√™s. No entanto, a fun√ß√£o est√° marcada como indefinida e precisa ser definida adicionando o c√≥digo desejado dentro da fun√ß√£o, como por exemplo, um print com a mensagem "Finalizando o app".


# Claro! Aqui est√° um exerc√≠cio baseado na aula:

# Escreva um programa em Python que exiba um menu de op√ß√µes para o usu√°rio, permitindo que ele escolha entre as seguintes op√ß√µes:

# Cadastrar um novo cliente
# Listar todos os clientes cadastrados
# Atualizar informa√ß√µes de um cliente
# Sair
# Utilize a fun√ß√£o input() para receber a escolha do usu√°rio e armazene-a em uma vari√°vel. Em seguida, utilize estruturas condicionais para executar a a√ß√£o correspondente √† op√ß√£o escolhida pelo usu√°rio.

# Lembre-se de utilizar mensagens claras para orientar o usu√°rio sobre o que deve ser digitado em cada caso.

# Espero que esse exerc√≠cio seja √∫til para voc√™ praticar o que aprendeu na aula! Se tiver mais alguma d√∫vida, √© s√≥ me perguntar. üòä


# Copiar c√≥digo
# nome = input('Digite o seu nome: ')
# print('Ol√°,', nome, '! Bem-vindo(a)!')
# Exemplo de uso do input() para receber dois n√∫meros e exibir a soma deles:
# python
# Copiar c√≥digo
# num1 = float(input('Digite o primeiro n√∫mero: '))
# num2 = float(input('Digite o segundo n√∫mero: '))
# soma = num1 + num2
# print('A soma dos n√∫meros √©:', soma)
# Exemplo de uso do input() para receber a idade do usu√°rio e exibir uma mensagem de acordo com a faixa et√°ria:
# python
# Copiar c√≥digo
# idade = int(input('Digite a sua idade: '))
# if idade < 18:
#     print('Voc√™ √© menor de idade.')
# else:
#     print('Voc√™ √© maior de idade.')
# Esses exemplos ilustram diferentes formas de utilizar o input() para receber dados do usu√°rio e trabalhar com eles no programa. Lembre-se de sempre utilizar mensagens claras para orientar o usu√°rio sobre o que deve ser digitado.

# Espero que esses exemplos adicionais sejam √∫teis para voc√™! Se tiver mais alguma d√∫vida, √© s√≥ me perguntar. üòä


# Com certeza! Aqui est√° um exerc√≠cio mais complexo baseado na aula de Manipula√ß√£o de Strings e Interpola√ß√£o de String:

# Escreva um programa em Python que solicite ao usu√°rio seu nome completo e sua data de nascimento no formato DD/MM/AAAA. Em seguida, exiba uma mensagem personalizada que inclua o nome do usu√°rio e sua idade atual.

# Para calcular a idade atual, voc√™ pode utilizar a biblioteca datetime do Python. Pesquise como utilizar essa biblioteca para obter a data atual e realizar o c√°lculo da idade.

# Exemplo de sa√≠da: "Ol√°, [nome]! Voc√™ tem [idade] anos."

# Lembre-se de utilizar a interpola√ß√£o de strings para inserir as informa√ß√µes corretas na mensagem. Divirta-se resolvendo o exerc√≠cio!

import random

def escolher_palavra():
    palavras = ["python", "programacao", "desenvolvimento", "openai", "inteligencia"]
    return random.choice(palavras)

def jogar_forca(palavra):
    letras_certas = set()
    tentativas = 6

    while tentativas > 0:
        letra = input("Digite uma letra: ")

        if letra in palavra:
            letras_certas.add(letra)
            print("Letra correta!")
        else:
            tentativas -= 1
            print(f"Letra incorreta! Tentativas restantes: {tentativas}")

        palavra_oculta = ''.join([letra if letra in letras_certas else '_' for letra in palavra])
        print(f"Palavra: {palavra_oculta}")

        if set(palavra) == letras_certas:
            print("Parab√©ns! Voc√™ acertou a palavra!")
            break

    if tentativas == 0:
        print(f"Game over! A palavra era: {palavra}")

palavra_secreta = escolher_palavra().lower()
print("Bem-vindo ao jogo da Forca!")
jogar_forca(palavra_secreta)